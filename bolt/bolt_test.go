package bolt

import (
	"testing"
)

func TestParsingTinymap(t *testing.T) {
	short := []byte{0xa1,
		// 'address'
		0x87, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
		// 'localhost:8888'
		0x8e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f,
		0x73, 0x74, 0x3a, 0x38, 0x38, 0x38, 0x38,
	}
	big := []byte{0xa5,
		// 'user_agent'
		0x8a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
		// 'neo4j-python/4.2.0 Python/3.8.6-final-0 (openbsd6)'
		0xd0, 0x32, 0x6e, 0x65, 0x6f, 0x34, 0x6a, 0x2d, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x34, 0x2e, 0x32, 0x2e, 0x30, 0x20, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x33, 0x2e, 0x38, 0x2e, 0x36, 0x2d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x2d, 0x30, 0x20, 0x28, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x73, 0x64, 0x36, 0x29, 0x87, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
		// short, above
		0xa1, 0x87, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x8e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x38, 0x38, 0x38,
		// 'scheme'
		0x86, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65,
		// 'basic'
		0x85, 0x62, 0x61, 0x73, 0x69, 0x63,
		// 'principal'
		0x89, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c,
		// 'neo4j'
		0x85, 0x6e, 0x65, 0x6f, 0x34, 0x6a,
		// 'credentials'
		0x8b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
		// 'password'
		0x88, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	}

	shortMap, n, err := ParseTinyMap(short)
	if err != nil {
		t.Fatalf("failed to parse short tinymap: %v", err)
	}
	if int(n) != len(short) {
		t.Fatalf("expected len of %d, got %d", len(short), n)
	}
	addrVal, found := shortMap["address"]
	if !found {
		t.Fatalf("failed to find 'address' in short tinymap")
	}
	addr, ok := addrVal.(string)
	if !ok {
		t.Fatalf("expected address to be a string, got %v", addr)
	}
	if addr != "localhost:8888" {
		t.Fatalf("expected address of 'localhost:8888', got %s", addr)
	}

	bigMap, _, err := ParseTinyMap(big)
	if err != nil {
		t.Fatalf("failed to parse big tinymap: %v", err)
	}
	agentVal, found := bigMap["user_agent"]
	if !found {
		t.Fatalf("failed ot find 'user_agent' in big tinymap")
	}
	agent, ok := agentVal.(string)
	if !ok {
		t.Fatalf("expected agent to be a string, got %v", agent)
	}
	if agent != "neo4j-python/4.2.0 Python/3.8.6-final-0 (openbsd6)" {
		t.Fatalf("got unexpected agent value: %s", agent)
	}
}
